# -*- coding: utf-8 -*-
"""Bonus Question Eshani.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19WFf5ECfrJiBanAPxErdkdlIC4UYUzmb
"""

import numpy as np
import sympy as sp
import plotly.graph_objects as go


x, y = sp.symbols('x y')


user_input = input("Enter your function: ")
try:
    objective_function = sp.sympify(user_input)
except sp.SympifyError:
    print("Error: Invalid function format.")
    exit()


scaled_objective_function = objective_function / 1e3


grad_x = sp.diff(scaled_objective_function, x)
grad_y = sp.diff(scaled_objective_function, y)

grad_x_func = sp.lambdify((x, y), grad_x)
grad_y_func = sp.lambdify((x, y), grad_y)


learning_rate = 0.1
max_iterations = 50
start_point = np.array([3.0, 4.0])


trajectory = [start_point]
point = start_point
for i in range(max_iterations):
    grad = np.array([grad_x_func(*point), grad_y_func(*point)])
    point = point - learning_rate * grad
    trajectory.append(point)

trajectory = np.array(trajectory)

objective_func = sp.lambdify((x, y), objective_function, "numpy")
x_vals = np.linspace(-5, 5, 100)
y_vals = np.linspace(-5, 5, 100)
X, Y = np.meshgrid(x_vals, y_vals)
Z = objective_func(X, Y)

num_frames = 300
interp_trajectory = np.linspace(trajectory[0], trajectory[-1], num_frames)

surface = go.Surface(z=Z, x=X, y=Y, colorscale='Plasma', opacity=0.8, showscale=False)


frames = []
for i in range(num_frames):
    point = interp_trajectory[i]
    z_val = objective_func(point[0], point[1])
    frame = go.Frame(
        data=[
            go.Surface(z=Z * (i / num_frames), x=X, y=Y, colorscale='Plasma', opacity=0.8, showscale=False),
            go.Scatter3d(
                x=interp_trajectory[:i+1, 0],
                y=interp_trajectory[:i+1, 1],
                z=[objective_func(p[0], p[1]) for p in interp_trajectory[:i+1]],
                mode='lines+markers',
                marker=dict(size=5, color='yellow', showscale=False),
                line=dict(color='red', width=3),
            ),
            go.Scatter3d(
                x=[point[0]],
                y=[point[1]],
                z=[z_val],
                mode='markers',
                marker=dict(size=10, color='lightblue', symbol='cross'),
                name='Current Point',
            )
        ],
        name=f"Frame {i}"
    )
    frames.append(frame)

fig = go.Figure(
    data=[surface],
    layout=go.Layout(
        title="Gradient Descent Animation",
        scene=dict(
            xaxis_title="X Axis",
            yaxis_title="Y Axis",
            zaxis_title="Objective Value (Z)",
            xaxis=dict(range=[-5, 5]),
            yaxis=dict(range=[-5, 5]),
            zaxis=dict(range=[0, Z.max()]),
        ),
        updatemenus=[dict(
            type="buttons",
            showactive=False,
            buttons=[
                dict(label="Play",
                     method="animate",
                     args=[None, dict(frame=dict(duration=100, redraw=True), fromcurrent=True)]),
                dict(label="Pause",
                     method="animate",
                     args=[[None], dict(frame=dict(duration=0, redraw=False), mode="immediate")])
            ]
        )]
    ),
    frames=frames
)

fig.show()

